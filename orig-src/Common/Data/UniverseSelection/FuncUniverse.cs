/*
 * QUANTCONNECT.COM - Democratizing Finance, Empowering Individuals.
 * Lean Algorithmic Trading Engine v2.0. Copyright 2014 QuantConnect Corporation.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); 
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
*/

using System;
using System.Collections.Generic;
using QuantConnect.Securities;

package com.quantconnect.lean.Data.UniverseSelection
{
    /**
     * Provides a functional implementation of <see cref="Universe"/>
    */
    public class FuncUniverse : Universe
    {
        private final UniverseSettings _universeSettings;
        private final Func<IEnumerable<BaseData>, IEnumerable<Symbol>> _universeSelector;

        /**
         * Gets the settings used for subscriptons added for this universe
        */
        public @Override UniverseSettings UniverseSettings
        {
            get { return _universeSettings; }
        }

        /**
         * Initializes a new instance of the <see cref="FuncUniverse"/> class
        */
         * @param configuration The configuration used to resolve the data for universe selection
         * @param universeSettings The settings used for new subscriptions generated by this universe
         * @param securityInitializer Initializes securities when they're added to the universe
         * @param universeSelector Returns the symbols that should be included in the universe
        public FuncUniverse(SubscriptionDataConfig configuration, UniverseSettings universeSettings, ISecurityInitializer securityInitializer, Func<IEnumerable<BaseData>, IEnumerable<Symbol>> universeSelector)
            : base(configuration, securityInitializer) {
            _universeSelector = universeSelector;
            _universeSettings = universeSettings;
        }

        /**
         * Performs an initial, coarse filter
        */
         * @param utcTime The current utc time
         * @param data The coarse fundamental data
        @returns The data that passes the filter
        public @Override IEnumerable<Symbol> SelectSymbols(DateTime utcTime, BaseDataCollection data) {
            return _universeSelector(data.Data);
        }
    }
}