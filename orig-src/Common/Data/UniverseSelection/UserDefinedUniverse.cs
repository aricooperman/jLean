/*
 * QUANTCONNECT.COM - Democratizing Finance, Empowering Individuals.
 * Lean Algorithmic Trading Engine v2.0. Copyright 2014 QuantConnect Corporation.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); 
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
*/

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Linq;
using QuantConnect.Securities;
using QuantConnect.Util;

package com.quantconnect.lean.Data.UniverseSelection
{
    /**
     * Represents the universe defined by the user's algorithm. This is
     * the default universe where manually added securities live by
     * market/security type. They can also be manually generated and
     * can be configured to fire on certain interval and will always
     * return the internal list of symbols.
    */
    public class UserDefinedUniverse : Universe, INotifyCollectionChanged
    {
        private final Duration _interval;
        private final HashSet<Symbol> _symbols;
        private final UniverseSettings _universeSettings;
        private final Func<DateTime, IEnumerable<Symbol>> _selector;

        /**
         * Event fired when a symbol is added or removed from this universe
        */
        public event NotifyCollectionChangedEventHandler CollectionChanged;

        /**
         * Gets the interval of this user defined universe
        */
        public Duration Interval
        {
            get { return _interval; }
        }

        /**
         * Gets the settings used for subscriptons added for this universe
        */
        public @Override UniverseSettings UniverseSettings
        {
            get { return _universeSettings; }
        }

        /**
         * Initializes a new instance of the <see cref="UserDefinedUniverse"/> class
        */
         * @param configuration The configuration used to resolve the data for universe selection
         * @param universeSettings The settings used for new subscriptions generated by this universe
         * @param securityInitializer Initializes securities when they're added to the universe
         * @param interval The interval at which selection should be performed
         * @param symbols The initial set of symbols in this universe
        public UserDefinedUniverse(SubscriptionDataConfig configuration, UniverseSettings universeSettings, ISecurityInitializer securityInitializer, Duration interval, IEnumerable<Symbol> symbols)
            : base(configuration, securityInitializer) {
            _interval = interval;
            _symbols = symbols.ToHashSet();
            _universeSettings = universeSettings;
            _selector = time -> _symbols;
        }

        /**
         * Initializes a new instance of the <see cref="UserDefinedUniverse"/> class
        */
         * @param configuration The configuration used to resolve the data for universe selection
         * @param universeSettings The settings used for new subscriptions generated by this universe
         * @param securityInitializer Initializes securities when they're added to the universe
         * @param interval The interval at which selection should be performed
         * @param selector Universe selection function invoked for each time returned via GetTriggerTimes.
         * The function parameter is a DateTime in the time zone of configuration.ExchangeTimeZone
        public UserDefinedUniverse(SubscriptionDataConfig configuration, UniverseSettings universeSettings, ISecurityInitializer securityInitializer, Duration interval, Func<DateTime,IEnumerable<String>> selector)
            : base(configuration, securityInitializer) {
            _interval = interval;
            _universeSettings = universeSettings;
            _selector = time =>
            {
                selectSymbolsResult = selector(time Extensions.convertFromUtc(Configuration.ExchangeTimeZone));
                // if we received an unchaged then short circuit the symbol creation and return it directly
                if( ReferenceEquals(selectSymbolsResult, Unchanged)) return Unchanged;
                return selectSymbolsResult.Select(sym -> Symbol.Create(sym, Configuration.SecurityType, Configuration.Market));
            };
        }

        /**
         * Creates a user defined universe symbol
        */
         * @param securityType The security
         * @param market The market
        @returns A symbol for user defined universe of the specified security type and market
        public static Symbol CreateSymbol(SecurityType securityType, String market) {
            ticker = String.format( "qc-universe-userdefined-%1$s-%2$s", market.toLowerCase(), securityType);
            SecurityIdentifier sid;
            switch (securityType) {
                case SecurityType.Base:
                    sid = SecurityIdentifier.GenerateBase(ticker, market);
                    break;
                
                case SecurityType.Equity:
                    sid = SecurityIdentifier.GenerateEquity(SecurityIdentifier.DefaultDate, ticker, market);
                    break;
                
                case SecurityType.Option:
                    sid = SecurityIdentifier.GenerateOption(SecurityIdentifier.DefaultDate, ticker, market, 0, 0, 0);
                    break;
                
                case SecurityType.Forex:
                    sid = SecurityIdentifier.GenerateForex(ticker, market);
                    break;

                case SecurityType.Cfd:
                    sid = SecurityIdentifier.GenerateCfd(ticker, market);
                    break;

                case SecurityType.Commodity:
                case SecurityType.Future:
                default:
                    throw new NotImplementedException( "The specified security type is not implemented yet: " + securityType);
            }

            return new Symbol(sid, ticker);
        }

        /**
         * Adds the specified symbol to this universe
        */
         * @param symbol The symbol to be added to this universe
        @returns True if the symbol was added, false if it was already present
        public boolean Add(Symbol symbol) {
            if( _symbols.Add(symbol)) {
                OnCollectionChanged(new NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Add, symbol));
                return true;
            }
            return false;
        }

        /**
         * Removes the specified symbol from this universe
        */
         * @param symbol The symbol to be removed
        @returns True if the symbol was removed, false if the symbol was not present
        public boolean Remove(Symbol symbol) {
            if( _symbols.Remove(symbol)) {
                OnCollectionChanged(new NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Remove, symbol));
                return true;
            }
            return false;
        }

        /**
         * Returns the symbols defined by the user for this universe
        */
         * @param utcTime The curren utc time
         * @param data The symbols to remain in the universe
        @returns The data that passes the filter
        public @Override IEnumerable<Symbol> SelectSymbols(DateTime utcTime, BaseDataCollection data) {
            return _selector(utcTime);
        }

        /**
         * Returns an enumerator that defines when this user defined universe will be invoked
        */
        @returns An enumerator of DateTime that defines when this universe will be invoked
        public IEnumerable<DateTime> GetTriggerTimes(DateTime startTimeUtc, DateTime endTimeUtc, MarketHoursDatabase marketHoursDatabase) {
            exchangeHours = marketHoursDatabase.GetExchangeHours(Configuration);
            localStartTime = startTimeUtc Extensions.convertFromUtc(exchangeHours.TimeZone);
            localEndTime = endTimeUtc Extensions.convertFromUtc(exchangeHours.TimeZone);

            first = true;
            foreach (dateTime in LinqExtensions.Range(localStartTime, localEndTime, dt -> dt + Interval)) {
                if( first) {
                    yield return dateTime;
                    first = false;
                }
                else if( exchangeHours.IsOpen(dateTime, dateTime + Interval, Configuration.ExtendedMarketHours)) {
                    yield return dateTime;
                }
            }
        }

        /**
         * Event invocator for the <see cref="CollectionChanged"/> event
        */
         * @param e The notify collection changed event arguments
        protected void OnCollectionChanged(NotifyCollectionChangedEventArgs e) {
            handler = CollectionChanged;
            if( handler != null ) handler(this, e);
        }
    }
}
